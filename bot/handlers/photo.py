from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.loader import bot
from bot.fsm.states import MediaState, AddUserStates, AddPhotoStates
from core.recognition import recognize_faces_from_image
from core.add_person import add_person_by_data
from core.add_photo_to_person import add_photo_to_person_by_username
from bot.config import DOWNLOAD_DIR, ADMIN_IDS
import os
import uuid

router = Router()

@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_state()

    # üìÇ –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file = await bot.get_file(message.photo[-1].file_id)
    unique_filename = f"{uuid.uuid4()}.jpg"
    file_path = os.path.join(DOWNLOAD_DIR, unique_filename)
    await bot.download_file(file.file_path, destination=file_path)

    try:
        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞) ---
        if state_data == AddUserStates.waiting_for_photo.state:
            if user_id not in ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return

            await state.update_data(photo_path=file_path)
            await state.set_state(AddUserStates.waiting_for_first_name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            return

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ ---
        if state_data == AddPhotoStates.waiting_for_photo.state:
            if user_id not in ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return

            data = await state.get_data()
            username = data.get("username")

            await message.answer("üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ –¥–æ–±–∞–≤–ª—è—é —Ñ–æ—Ç–æ...")
            try:
                add_photo_to_person_by_username(username, file_path)
                await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            finally:
                await state.clear()
            return

        # --- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞ (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
        if state_data == MediaState.waiting_for_photo.state:
            await message.answer("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ...")
            results = recognize_faces_from_image(file_path)
            for result in results:
                await message.answer(result)
            await state.clear()
            return

        # --- –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ ---
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\" –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    finally:
        # üßπ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if os.path.exists(file_path):
            os.remove(file_path)